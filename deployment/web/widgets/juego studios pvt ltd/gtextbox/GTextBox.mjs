
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { Component, createElement } from 'react';

function hot(widget) {
  return widget;
}

var classnames = {exports: {}};

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */
	(function () {

	  var hasOwn = {}.hasOwnProperty;

	  function classNames() {
	    var classes = [];

	    for (var i = 0; i < arguments.length; i++) {
	      var arg = arguments[i];
	      if (!arg) continue;
	      var argType = typeof arg;

	      if (argType === 'string' || argType === 'number') {
	        classes.push(arg);
	      } else if (Array.isArray(arg)) {
	        if (arg.length) {
	          var inner = classNames.apply(null, arg);

	          if (inner) {
	            classes.push(inner);
	          }
	        }
	      } else if (argType === 'object') {
	        if (arg.toString === Object.prototype.toString) {
	          for (var key in arg) {
	            if (hasOwn.call(arg, key) && arg[key]) {
	              classes.push(key);
	            }
	          }
	        } else {
	          classes.push(arg.toString());
	        }
	      }
	    }

	    return classes.join(' ');
	  }

	  if (module.exports) {
	    classNames.default = classNames;
	    module.exports = classNames;
	  } else {
	    window.classNames = classNames;
	  }
	})();
} (classnames));

var classNames = classnames.exports;

class TextInput extends Component {
    constructor() {
        super(...arguments);
        this.handleChange = this.onChange.bind(this);
    }
    render() {
        const className = classNames("form-control", this.props.className);
        return createElement("input", { type: "text", className: className, style: this.props.style, value: this.props.value, tabIndex: this.props.tabIndex, onChange: this.handleChange });
    }
    onChange(event) {
        if (this.props.onUpdate) {
            this.props.onUpdate(event.target.value);
        }
    }
}

class TextBox extends Component {
    constructor() {
        super(...arguments);
        this.onUpdateHandle = this.onUpdate.bind(this);
    }
    onUpdate(value) {
        this.props.textAttribute.setValue(value);
    }
    render() {
        const value = this.props.textAttribute.value || "";
        return (createElement(TextInput, { value: value, tabIndex: this.props.tabIndex, onUpdate: this.onUpdateHandle }));
    }
}
var GTextBox = hot(TextBox);

export { GTextBox as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
